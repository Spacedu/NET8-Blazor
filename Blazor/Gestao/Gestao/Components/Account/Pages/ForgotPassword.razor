@page "/Account/ForgotPassword"
@layout Gestao.Components.Layout.Default.DefaultLayout

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using Gestao.Data

@inject UserManager<ApplicationUser> UserManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Forgot your password?</PageTitle>

<div class="p-lg-5 p-4">
    <h5 class="text-primary">Esqueceu a senha?</h5>
    <p class="text-muted">Crie uma nova senha</p>

    <div class="mt-2 text-center">
        <lord-icon src="https://cdn.lordicon.com/rhvddzym.json" trigger="loop" colors="primary:#0ab39c" class="avatar-xl">
        </lord-icon>
    </div>

    <div class="alert border-0 alert-warning text-center mb-2 mx-2" role="alert">
        Digite seu e-mail e instruções serão enviadas para você!
    </div>
    <div class="p-2">
        <EditForm Model="Input" FormName="forgot-password" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="mb-4">
                <label for="email" class="form-label">E-mail</label>
                <InputText @bind-Value="Input.Email" id="email" class="form-control" autocomplete="username" aria-required="true" placeholder="Digite seu e-mail" />                
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>

            <div class="text-center mt-4">
                <button class="btn btn-success w-100" type="submit">Enviar</button>
            </div>
        </EditForm>
    </div>

    <div class="mt-5 text-center">
        <p class="mb-0"><a href="/Account/Login" class="fw-semibold text-primary text-decoration-underline"> Voltar </a> </p>
    </div>
</div>
@code {
    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    private async Task OnValidSubmitAsync()
    {
        var user = await UserManager.FindByEmailAsync(Input.Email);
        if (user is null || !(await UserManager.IsEmailConfirmedAsync(user)))
        {
            // Don't reveal that the user does not exist or is not confirmed
            RedirectManager.RedirectTo("Account/ForgotPasswordConfirmation");
        }

        // For more information on how to enable account confirmation and password reset please
        // visit https://go.microsoft.com/fwlink/?LinkID=532713
        var code = await UserManager.GeneratePasswordResetTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ResetPassword").AbsoluteUri,
            new Dictionary<string, object?> { ["code"] = code });

        await EmailSender.SendPasswordResetLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        RedirectManager.RedirectTo("Account/ForgotPasswordConfirmation");
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";
    }
}

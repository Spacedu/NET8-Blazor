@page "/Account/RegisterConfirmation"
@layout Gestao.Components.Layout.Default.DefaultLayout

@using System.Text
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using Gestao.Data

@inject UserManager<ApplicationUser> UserManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Confirmação de cadastro</PageTitle>

<div class="p-lg-5 p-4">
    <h5 class="text-primary">Confirmação de cadastro</h5>
    <StatusMessage Message="@statusMessage" />
    <div class="mt-2 text-center">
        <lord-icon src="https://cdn.lordicon.com/rhvddzym.json" trigger="loop" colors="primary:#0ab39c" class="avatar-xl">
        </lord-icon>
    </div>
    <div class="p-2">
        @if (emailConfirmationLink is not null)
        {
            <p>
                Este aplicativo não esta com o sistema de envio de e-mail configurado, veja <a href="https://aka.ms/aspaccountconf">a documentação</a> para saber como configurar o envio de e-mail.
                
                Confirmação manual: <a href="@emailConfirmationLink">Clique aqui para confirmar seu cadastro</a>
            </p>
        }
        else
        {
            <p>Verifique sua caixa de e-mail para confirmar o cadastro.</p>
        }
    </div>

    <div class="mt-5 text-center">
        <p class="mb-0"><a href="/Account/Login" class="fw-semibold text-primary text-decoration-underline"> Voltar </a> </p>
    </div>
</div>

@code {
    private string? emailConfirmationLink;
    private string? statusMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromQuery]
    private string? Email { get; set; }

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Email is null)
        {
            RedirectManager.RedirectTo("");
        }

        var user = await UserManager.FindByEmailAsync(Email);
        if (user is null)
        {
            HttpContext.Response.StatusCode = StatusCodes.Status404NotFound;
            statusMessage = $"Erro ao tentar buscar o usuário com o e-mail especificado: {Email}.";
        }
        else if (EmailSender is IdentityNoOpEmailSender)
        {
            // Once you add a real email sender, you should remove this code that lets you confirm the account
            var userId = await UserManager.GetUserIdAsync(user);
            var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
            code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
            emailConfirmationLink = NavigationManager.GetUriWithQueryParameters(
                NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
                new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });
        }
    }
}

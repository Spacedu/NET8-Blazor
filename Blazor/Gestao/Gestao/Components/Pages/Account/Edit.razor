@page "/Account/Edit/{id:int}"
@rendermode InteractiveServer

@inject IJSRuntime JS
@inject NavigationManager NavigationManager
@inject IAccountRepository AccountRepository
@inject ILocalStorageService LocalStorage
<PageTitle>
    Conta - Atualizar
</PageTitle>
<div class="row">
    <div class="col-lg-12">
        <div class="card">
            <div class="card-header align-items-center d-flex">
                <h4 class="card-title mb-0 flex-grow-1">Atualizar conta</h4>
            </div>
            <div class="card-body">
                <EditForm Model="Account" OnValidSubmit="Submit" FormName="Update">
                    <DataAnnotationsValidator />
                    <div class="row">
                        <div class="col-xxl-3 col-md-6">
                            <div>
                                <label for="description" class="form-label">Descrição/Nome</label>
                                <InputText @bind-Value="Account!.Description" autocomplete="not" class="form-control" id="description" />
                                <ValidationMessage For="()=> Account!.Description" />
                            </div>
                        </div>
                        <div class="col-xxl-3 col-md-6">
                            <div>
                                <label for="balance" class="form-label">Saldo inicial</label>
                                <InputNumber @bind-Value="Account!.Balance" autocomplete="not" class="form-control" id="balance" />
                                <ValidationMessage For="()=> Account!.Balance" />
                            </div>
                        </div>
                        <div class="col-xxl-3 col-md-6">
                            <div>
                                <label for="balanceDate" class="form-label">Data de abertura da conta</label>
                                <InputDate @bind-Value="Account!.BalanceDate" autocomplete="not" class="form-control" id="balanceDate" />
                                <ValidationMessage For="()=> Account!.BalanceDate" />
                            </div>
                        </div>
                    </div>
                    <div class="row mt-3">
                        <div class="d-flex justify-content-between">
                            <a href="/Account/List" class="btn btn-light">Voltar</a>
                            <button type="submit" class="btn btn-primary">Salvar</button>
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>


@code {
    [Parameter] public int Id { get; set; }

    [SupplyParameterFromForm]
    private Account Account { get; set; } = new();

    protected override async Task OnParametersSetAsync()
    {
        var account = await AccountRepository.Get(Id);

        if (account is not null)
            Account = account;
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(!firstRender){
            if (Account.Id == 0)
            {
                await JS.InvokeVoidAsync("alert", "A conta selecionada não existe no banco!");
                NavigationManager.NavigateTo("/Account/List");
                return;
            }
            var company = await LocalStorage.GetItemAsync<Company>(AppConstants.LocalStorageCompany);

            if (Account!.CompanyId != company!.Id)
            {
                await JS.InvokeVoidAsync("alert", $"A conta não pertence a empresa '{company.LegalName}'!");
                NavigationManager.NavigateTo("/Account/List");
            }
        }
    }


    private async Task Submit()
    {
        await AccountRepository.Update(Account);

        await JS.InvokeVoidAsync("alert", "Registro salvo com sucesso!");
        NavigationManager.NavigateTo("/Account/List");
    }
}
@page "/Financial/{type}/Add"
@rendermode InteractiveServer

@inject IJSRuntime JS
@inject NavigationManager NavigationManager
@inject IFinancialTransactionRepository FinancialTransactionRepository
@inject ICategoryRepository CategoryRepository
@inject IAccountRepository AccountRepository
@inject ILocalStorageService LocalStorage

<PageTitle>
    @Type - Cadastro
</PageTitle>
<div class="row">
    <div class="col-lg-12">
        <div class="card">
            <div class="card-header align-items-center d-flex">
                <h4 class="card-title mb-0 flex-grow-1">Cadastrar @Type</h4>
            </div>
            <div class="card-body">
                <EditForm Model="FinancialTransaction" OnValidSubmit="Submit" FormName="Register">
                    <DataAnnotationsValidator />
                    <div class="row">
                        <div class="col-xxl-3 col-md-6">
                            <div>
                                <label for="description" class="form-label">Descrição</label>
                                <InputText @bind-Value="FinancialTransaction!.Description" autocomplete="not" class="form-control" id="description" />
                                <ValidationMessage For="()=> FinancialTransaction!.Description" />
                            </div>
                        </div>
                        <div class="col-xxl-3 col-md-6">
                            <div>
                                <label for="category" class="form-label">Categoria</label>
                                <InputSelect @bind-Value="FinancialTransaction!.CategoryId" class="form-select" id="category">
                                    @if(Categories is not null)
                                    {
                                        @foreach(var category in Categories)
                                        {
                                            <option value="@category.Id">@category.Name</option>
                                        }
                                    }
                                </InputSelect>
                                <ValidationMessage For="()=> FinancialTransaction!.CategoryId" />
                            </div>
                        </div>
                        <div class="col-xxl-3 col-md-6">
                            <div>
                                <label for="account" class="form-label">Conta</label>
                                <InputSelect @bind-Value="FinancialTransaction!.AccountId" class="form-select" id="account">
                                    @if (Accounts is not null)
                                    {
                                        @foreach (var account in Accounts)
                                        {
                                            <option value="@account.Id">@account.Description</option>
                                        }
                                    }
                                </InputSelect>
                                <ValidationMessage For="()=> FinancialTransaction!.AccountId" />
                            </div>
                        </div>
                        <div class="col-xxl-3 col-md-6">
                            <div>
                                <label for="referenceDate" class="form-label">Data da competência</label>
                                <InputDate @bind-Value="FinancialTransaction!.ReferenceDate" autocomplete="not" class="form-control" id="referenceDate" />
                                <ValidationMessage For="()=> FinancialTransaction!.ReferenceDate" />
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-xxl-3 col-md-6">
                            <div>
                                <label for="dueDate" class="form-label">Data vencimento</label>
                                <InputDate @bind-Value="FinancialTransaction!.DueDate" autocomplete="not" class="form-control" id="dueDate" />
                                <ValidationMessage For="()=> FinancialTransaction!.DueDate" />
                            </div>
                        </div>
                        <div class="col-xxl-3 col-md-6">
                            <div>
                                <label for="ammount" class="form-label">Valor</label>
                                <InputNumber @bind-Value="FinancialTransaction!.Amount" autocomplete="not" class="form-control" id="ammount" />
                                <ValidationMessage For="()=> FinancialTransaction!.Amount" />
                            </div>
                        </div>
                        <div class="col-xxl-3 col-md-6">
                            <div>
                                <label for="repeat" class="form-label">Repetir</label>
                                <InputSelect @bind-Value="FinancialTransaction!.Repeat" @bind-Value:after="RepeatChanged" class="form-control" id="repeat">
                                    @foreach (Recurrence option in Enum.GetValues(typeof(Recurrence)))
                                    {
                                        <option value="@option">@option.GetDisplayName()</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For="()=> FinancialTransaction!.Repeat" />
                            </div>
                        </div>
                        <div class="col-xxl-3 col-md-6">
                            <div>
                                <label for="repeatTimes" class="form-label">Vezes</label>
                                <InputNumber @bind-Value="FinancialTransaction!.RepeatTimes" disabled="@RepeatTimesDisabled" autocomplete="not" class="form-control" id="repeatTimes" />
                                <ValidationMessage For="()=> FinancialTransaction!.RepeatTimes" />
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-xxl-3 col-md-6">
                            <div>
                                <label for="interestPenalty" class="form-label">Juros/Multas</label>
                                <InputNumber @bind-Value="FinancialTransaction!.InterestPenalty" autocomplete="not" class="form-control" id="interestPenalty" />
                                <ValidationMessage For="()=> FinancialTransaction!.InterestPenalty" />
                            </div>
                        </div>
                        <div class="col-xxl-3 col-md-6">
                            <div>
                                <label for="discount" class="form-label">Desconto</label>
                                <InputNumber @bind-Value="FinancialTransaction!.Discount" autocomplete="not" class="form-control" id="discount" />
                                <ValidationMessage For="()=> FinancialTransaction!.Discount" />
                            </div>
                        </div>
                        <div class="col-xxl-3 col-md-6">
                            <div>
                                <label for="paymentDate" class="form-label">Data pagamento</label>
                                <InputDate @bind-Value="FinancialTransaction!.PaymentDate" autocomplete="not" class="form-control" id="paymentDate" />
                                <ValidationMessage For="()=> FinancialTransaction!.PaymentDate" />
                            </div>
                        </div>
                        <div class="col-xxl-3 col-md-6">
                            <div>
                                <label for="amoundPaid" class="form-label">Valor pago</label>
                                <InputNumber @bind-Value="FinancialTransaction!.AmoundPaid" autocomplete="not" class="form-control" id="amoundPaid" />
                                <ValidationMessage For="()=> FinancialTransaction!.AmoundPaid" />
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-12">
                            <div>
                                <label for="observation" class="form-label">Observação</label>
                                <InputTextArea @bind-Value="FinancialTransaction!.Observation" autocomplete="not" class="form-control" id="observation" />
                                <ValidationMessage For="()=> FinancialTransaction!.Observation" />
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-12">
                            <div>
                                <label for="observation" class="form-label">Anexar documentos</label>
                                @*<InputTextArea @bind-Value="FinancialTransaction!.Observation" autocomplete="not" class="form-control" id="observation" />*@
                                <ValidationMessage For="()=> FinancialTransaction!.Observation" />
                            </div>
                        </div>
                    </div>

                    <div class="row mt-3">
                        <div class="d-flex justify-content-between">
                            <a href="/Category/List" class="btn btn-light">Voltar</a>
                            <button type="submit" class="btn btn-primary">Salvar</button>
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string? Type { get; set; }

    [SupplyParameterFromForm]
    private FinancialTransaction FinancialTransaction { get; set; } = new() { };

    private Company? Company;

    private List<Category>? Categories { get; set; }
    private List<Account>? Accounts { get; set; }

    private bool RepeatTimesDisabled { get; set; } = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        //TODO - Segurança: Só deixar acessar essa página se tiver Categorias/Contas no banco.
        if(firstRender){
            Company = await LocalStorage.GetItemAsync<Company>(AppConstants.LocalStorageCompany);
            Categories = await CategoryRepository.GetAll(Company!.Id);
            Accounts = await AccountRepository.GetAll(Company!.Id);
        }

        StateHasChanged();
    }

    private async Task Submit()
    {
        FinancialTransaction.CreatedAt = DateTimeOffset.Now;
        //FinancialTransaction.CompanyId = Company!.Id;

        await FinancialTransactionRepository.Add(FinancialTransaction);

        await JS.InvokeVoidAsync("alert", "Registro salvo com sucesso!");
        NavigationManager.NavigateTo("/Category/List");
    }
    private void RepeatChanged()
    {
        if (FinancialTransaction.Repeat == Recurrence.None) {
            RepeatTimesDisabled = true;
            FinancialTransaction.RepeatTimes = null;
        }
        else
            RepeatTimesDisabled = false;
    }
}

@page "/Financial/{type}/Add"
@rendermode InteractiveServer

@inject IJSRuntime JS
@inject NavigationManager NavigationManager
@inject IFinancialTransactionRepository FinancialTransactionRepository
@inject IQueue Queue

@if (Type is not null)
{
    <PageTitle>
        @TypeFinancialTransactionToString.Converter(Type).ToUpper() - CADASTRO
    </PageTitle>
}
<div class="row">
    <div class="col-lg-12">
        <div class="card">
            <div class="card-header align-items-center d-flex">
                @if (Type is not null)
                {
                    <h4 class="card-title mb-0 flex-grow-1">Cadastrar @TypeFinancialTransactionToString.Converter(Type)</h4>
                }
            </div>
            <div class="card-body">
                <FinancialTransactionForm Type="@Type" OnSave="Save" />
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string? Type { get; set; }

    private async Task Save(FinancialTransaction financialTransaction)
    {
        financialTransaction.CreatedAt = DateTimeOffset.Now;
        await FinancialTransactionRepository.Add(financialTransaction);

        if (financialTransaction.Repeat != Recurrence.None)
        {
            Queue.QueueInvocableWithPayload<FinancialTransactionRepeatInvocable, FinancialTransaction>(financialTransaction);
            await JS.InvokeVoidAsync("alert", "Registro salvo com sucesso! As parcelas serão criadas em alguns minutos!");
        }
        else
        {
            await JS.InvokeVoidAsync("alert", "Registro salvo com sucesso!");
        }


        NavigationManager.NavigateTo($"/Financial/{Type}/List");
    }
}
